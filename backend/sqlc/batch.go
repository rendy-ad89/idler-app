// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createUsersMachines = `-- name: CreateUsersMachines :batchexec
INSERT INTO users_machines (
  user_id, machine_id
) VALUES (
  $1, $2
)
`

type CreateUsersMachinesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateUsersMachinesParams struct {
	UserID    int64
	MachineID int64
}

func (q *Queries) CreateUsersMachines(ctx context.Context, arg []CreateUsersMachinesParams) *CreateUsersMachinesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.UserID,
			a.MachineID,
		}
		batch.Queue(createUsersMachines, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateUsersMachinesBatchResults{br, len(arg), false}
}

func (b *CreateUsersMachinesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateUsersMachinesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const updateUsersMachines = `-- name: UpdateUsersMachines :batchexec
UPDATE users_machines
SET level = $3
WHERE user_id = $1 AND machine_id = $2
`

type UpdateUsersMachinesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpdateUsersMachinesParams struct {
	UserID    int64
	MachineID int64
	Level     pgtype.Int4
}

func (q *Queries) UpdateUsersMachines(ctx context.Context, arg []UpdateUsersMachinesParams) *UpdateUsersMachinesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.UserID,
			a.MachineID,
			a.Level,
		}
		batch.Queue(updateUsersMachines, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpdateUsersMachinesBatchResults{br, len(arg), false}
}

func (b *UpdateUsersMachinesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpdateUsersMachinesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
