// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, password
) VALUES (
  $1, $2
)
RETURNING id, username, password, cash, last_save
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Cash,
		&i.LastSave,
	)
	return i, err
}

const getMachines = `-- name: GetMachines :many
SELECT id, priority, name, description, generation, price, increment, type FROM machines
ORDER BY priority ASC
`

func (q *Queries) GetMachines(ctx context.Context) ([]Machine, error) {
	rows, err := q.db.Query(ctx, getMachines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Machine
	for rows.Next() {
		var i Machine
		if err := rows.Scan(
			&i.ID,
			&i.Priority,
			&i.Name,
			&i.Description,
			&i.Generation,
			&i.Price,
			&i.Increment,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, cash, last_save FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Cash,
		&i.LastSave,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, cash, last_save FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Cash,
		&i.LastSave,
	)
	return i, err
}

const getUsersAmplifiers = `-- name: GetUsersAmplifiers :many
SELECT priority, name, description, level, generation, price, increment FROM users_machines um
JOIN machines m ON m.id = um.machine_id
WHERE user_id = $1 AND type = 'amplifier'
ORDER BY priority ASC
`

type GetUsersAmplifiersRow struct {
	Priority    int32
	Name        string
	Description string
	Level       pgtype.Int4
	Generation  pgtype.Numeric
	Price       pgtype.Numeric
	Increment   pgtype.Numeric
}

func (q *Queries) GetUsersAmplifiers(ctx context.Context, userID int64) ([]GetUsersAmplifiersRow, error) {
	rows, err := q.db.Query(ctx, getUsersAmplifiers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersAmplifiersRow
	for rows.Next() {
		var i GetUsersAmplifiersRow
		if err := rows.Scan(
			&i.Priority,
			&i.Name,
			&i.Description,
			&i.Level,
			&i.Generation,
			&i.Price,
			&i.Increment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersGenerators = `-- name: GetUsersGenerators :many
SELECT priority, name, description, level, generation, price, increment FROM users_machines um
JOIN machines m ON m.id = um.machine_id
WHERE user_id = $1 AND type = 'generator'
ORDER BY priority ASC
`

type GetUsersGeneratorsRow struct {
	Priority    int32
	Name        string
	Description string
	Level       pgtype.Int4
	Generation  pgtype.Numeric
	Price       pgtype.Numeric
	Increment   pgtype.Numeric
}

func (q *Queries) GetUsersGenerators(ctx context.Context, userID int64) ([]GetUsersGeneratorsRow, error) {
	rows, err := q.db.Query(ctx, getUsersGenerators, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersGeneratorsRow
	for rows.Next() {
		var i GetUsersGeneratorsRow
		if err := rows.Scan(
			&i.Priority,
			&i.Name,
			&i.Description,
			&i.Level,
			&i.Generation,
			&i.Price,
			&i.Increment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersMachines = `-- name: GetUsersMachines :many
SELECT user_id, machine_id, priority, name, description, level, generation, price, increment, type FROM users_machines um
JOIN machines m ON m.id = um.machine_id
WHERE user_id = $1
ORDER BY priority ASC
`

type GetUsersMachinesRow struct {
	UserID      int64
	MachineID   int64
	Priority    int32
	Name        string
	Description string
	Level       pgtype.Int4
	Generation  pgtype.Numeric
	Price       pgtype.Numeric
	Increment   pgtype.Numeric
	Type        string
}

func (q *Queries) GetUsersMachines(ctx context.Context, userID int64) ([]GetUsersMachinesRow, error) {
	rows, err := q.db.Query(ctx, getUsersMachines, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersMachinesRow
	for rows.Next() {
		var i GetUsersMachinesRow
		if err := rows.Scan(
			&i.UserID,
			&i.MachineID,
			&i.Priority,
			&i.Name,
			&i.Description,
			&i.Level,
			&i.Generation,
			&i.Price,
			&i.Increment,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveProgress = `-- name: SaveProgress :exec
UPDATE users
SET cash = $2, last_save = NOW()
WHERE id = $1
`

type SaveProgressParams struct {
	ID   int64
	Cash pgtype.Numeric
}

func (q *Queries) SaveProgress(ctx context.Context, arg SaveProgressParams) error {
	_, err := q.db.Exec(ctx, saveProgress, arg.ID, arg.Cash)
	return err
}
